#!/usr/bin/env ruby
# -*- ruby -*-
require 'rubygems'
require 'tmail'
require 'fileutils'

MAILDIR_ROOT = '/home/scott/Maildir'
MAILDIR_BACKUP = '/home/scott/Mail-backup'

class RGTERuleFinished < Exception
end

class RGTEMessage
  def initialize(filename)
    @filename = filename
  end
  
  def read
    unless flags.include?('S')
      flagged_name = add_flag('S')
      FileUtils.mv(@filename, flagged_name)
      @filename = flagged_name
    end
  end

  private
  def add_flag(flag)
    f = flags
    f << flag
    "#{base}:2,#{f.uniq.sort.join}"
  end

  def base
    @filename =~ /(.+):2,D?F?P?R?S?T?/
    $1
  end

  def flags
    @filename =~ /.+:2,(D?F?P?R?S?T?)/
    $1.split('')
  end
end

class RGTE
  def initialize(str)
    @message = TMail::Mail.parse str
  end
  
  def process!
    begin
      instance_eval(open("/home/scott/.rgte-rules").read)
    rescue RGTERuleFinished
    else
      save_to 'inbox'
    end
  end

  def list(address, mailbox, &block)
    [:to, :cc, :from].each do |header|
      if Array(@message.send(header)).any? {|addr| addr =~ /#{address}/i}
        msg = save_to mailbox
        yield(msg) if block_given?
        raise RGTERuleFinished
      end
    end
  end

  def pipe(process, match, mailbox, &block)
    f = IO.popen(process, 'r+')
    f.print @message
    f.close_write
    output = f.read
    f.close_read
    if output =~ match
      save_to mailbox
      raise RGTERuleFinished
    end
  end

  def backup
    backupdir = "#{MAILDIR_BACKUP}/#{Time.now.strftime('%Y-%m')}/cur"
    FileUtils.mkdir_p backupdir
    open("#{backupdir}/#{message_filename}", 'w') do |f|
      f.write @message
    end
  end

  private
  def save_to(mailbox)
    mbname = mailbox_name(mailbox)
    msname = message_filename
    full_path = "#{mbname}/#{msname}"
    
    FileUtils.mkdir_p(mbname)
    open(full_path, 'w') do |f|
      f.write @message
    end
    RGTEMessage.new(full_path)
  end

  def mailbox_name(mailbox)
    if mailbox == 'inbox'
      "#{MAILDIR_ROOT}/cur"
    else
      "#{MAILDIR_ROOT}/.#{mailbox.sub('/', '.')}/cur"
    end
  end

  def message_filename
    mid = "RGTE#{rand(100000)}#{Time.now.to_i.to_s}#{Process.pid}"
    filebase = "#{Time.now.to_i.to_s}.#{mid}.rgte"
    "#{filebase}:2,"
  end
end


RGTE.new(STDIN.read).process!
